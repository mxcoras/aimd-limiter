name: CI

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
  workflow_dispatch:

env:
  FORCE_COLOR: "1"

permissions:
  contents: read

jobs:
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"
      - name: Ensure lockfile is current
        run: uv lock --check
      - name: Install project dependencies
        run: uv sync --locked
      - name: Check formatting
        run: uv run ruff format --check
      - name: Lint with Ruff
        env:
          RUFF_OUTPUT_FORMAT: github
        run: uv run ruff check
      - name: Type check with mypy
        run: uv run mypy src tests
      - name: Run pre-commit hooks
        run: uv run pre-commit run --all-files --show-diff-on-failure --hook-stage manual

  tests:
    name: Tests on ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.10", "3.11", "3.12", "3.13", "3.14"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ matrix.python }}
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}
      - name: Install project dependencies
        run: uv sync --locked
      - name: Run pytest
        run: >-
          uv run pytest -v --junitxml=junit.xml -o junit_family=legacy
          --cov-report=xml
      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            junit.xml

  build:
    name: Build distributions
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"
      - name: Ensure lockfile is current
        run: uv lock --check
      - name: Install project dependencies
        run: uv sync --locked
      - name: Build packages
        run: uv build
      - name: Verify distributions
        run: uvx twine check --strict dist/*
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish:
    name: Publish release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/aimd-limiter
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v5
        with:
          name: python-package-distributions
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          skip-existing: true
      - name: Create GitHub release
        uses: ncipollo/release-action@v1.20.0
        with:
          tag: ${{ github.ref_name }}
          name: aimd-limiter ${{ github.ref_name }}
          body: "Automated release for ${{ github.ref_name }}."
          artifacts: "dist/*"
